function [ trajectory ] = main_microbialSim(Ks, vmax)

%%microbialSim Framework

%% Parameters for the microbialSim simulation

solverPars.FBAsolver = 2; % Select FBA solver, set to 1 for CellNetAnalyzer
%   and to 2 for COBRA Toolbox
solverPars.tend = 10; % Simulation end time (in hours)
solverPars.timeStepSize=0.1;%0.002 % Default simulation step size (in hours)
solverPars.saveLoadedModelsToFile = 1; % Set to 1 to save loaded SBML
%   models in Matlab format for speeding up subsequent simulation runs.
%   Models are stored in "loadedModels<date><time>.mat".
solverPars.readInitialStateFrom = ''; % Provide trajectory file name to
%   continue a previous simulation run ("simulatedTrajectory_*.mat_restartInit.mat").
solverPars.parallel = 1; % Set to 1 to compute FBA models in parallel using
%   Matlab's spmd environment
solverPars.maxWorkers = 5; % maximum number of workers to recruit for
%   parallel pool
solverPars.dopFBA = 1; % Minimize sum of total flux in each FBA computation
%   (pFBA). Set to 0 to deactivate.
solverPars.doMin2PrevFlux = 0; % Minimize deviation to flux distribution of
%   previous time step for each model. Set to 0 to deactivate.
solverPars.fluxTolerance = 1e-3;%1e-6; % During minimization of deviation to
%   previous flux, allow for this deviation for unaltered fluxes. Also
%   used as the tolerance when reporting limiting fluxes.
solverPars.minimalGrowth = 1e-6; % If predicted growth rate is below this
%   threshold, assume that no growth is possible
solverPars.solverType = 0; % Set to 0 for augmented forward Euler method,
%   1 for direct approach (using Matlab's ODE solver)
solverPars.doMassBalance = 1; % Set to 0 to avoid calculation of mass balances
%   for all exchange fluxes at the end of the simulation (can take a long
%   time)

% Only used if augmented forward Euler method is used:
solverPars.myAccuracy = 1e-9;%1e-15; % Compound concentrations below this value
%   are evaluated to be zero.
solverPars.myBioAccuracy = 1e-9;%1e-15; % Biomass concentrations below this 
%   value are evaluated to be zero.
solverPars.SteadyStateAccuracy = 1e-2;%1e-5; % Allow for this deviation between 
%   production and consumption rate when computing steady state during
%   time step size reduction
solverPars.maxDeviation = 25.0;%5.0; % For compounds of high demand, reduce
%   time step size so that compound change is not bigger than this value
%   (specified in %). This helps to avoid oscillatory behavior. To disable
%   this feature and speed up simulation, set to "inf"
solverPars.biomassReductionFactor = 8.0;%2.0; % If negative biomass concentrations
%   occur, reduce time step size such that at new time step, biomass
%   becomes old biomass divided by this factor.
solverPars.recordLimitingFluxes = 1; % record during the simulation which
%   fluxes are at their boundary
solverPars.recording = 0; % Set to 1 to save reactor state at each iteration
%   to separate files.

% Only used if COBRA is used:
solverPars.minRelaxValue = 1e-11; % If minimization of deviation to
%   previous flux fails, relax restrictions, starting with this value
%   (allow small zero-boundary violations by this amount) ...
solverPars.maxRelaxValue = 1; % ... and stop at this value.

% Only used for direct approach:
solverPars.solver = 2; % Set to 1 for ode45 solver, to 2 for ode15s solver.
solverPars.nonNegative = 0; % Set to 1 to activate NonNegative option for
%   solver.
solverPars.relTol = 1e-3; %1e-9; % Set relative tolerance
solverPars.absTol = 1e-3;%1e-9; % Set absolute tolerance

% Filenames
fileSuffix = strrep(char(datetime('now')),':', '_');
modelFile = strcat('loadedModels_', fileSuffix, '.mat');
solverPars.trajectoryFile = strcat('simulatedTrajectory_', fileSuffix, '.mat');

for name = {modelFile, solverPars.trajectoryFile}
    if exist(char(name), 'file') == 2
        error(strcat('Filename ', char(name), ' already exists. Aborting.'))
    end
end

%% Path variables 
modelsPath = ''; %Directory path for the metabolic reconstructions
trajFilesPath = ''; % Directory path were the final trajectory files will be saved.


%% SCENARIO SPECIFIC SETUP
clearvars models
workerModels = 4;
%% Selection for the metabolic reconstructions to be used in the community simulation (numbers represent the file number in the "modelsPath" directory.


%speciesToConsider = [35, 100, 135, 311, 406, 629, 647, 694];  %Mock community

%speciesToConsider = [403, 629, 137, 35, 87]; %Clinical: Group 1
%speciesToConsider = [109, 100, 694]; %Clinical Group 2


%speciesToConsider = [100, 50, 135, 87]; %In vitro: Group 1
%speciesToConsider = [335, 310, 107, 88, 176, 395]; %In vitro: Group 2
%speciesToConsider = [302, 334, 629, 246, 139]; %In vitro: Group 3
%speciesToConsider = [137, 144, 272, 341, 329, 597]; %In vitro: Group 4
%speciesToConsider = [403, 66, 186, 684]; %In vitro: Group 5


[models, externalCompounds] = prepareFBAmodel(speciesToConsider, modelsPath, solverPars.FBAsolver);
solverPars.saveLoadedModelsToFile =1; % look for "loadedModels_*.mat" in current directory, can be used in subsequent runs for speed-up (see next line)
%load('./loadedModels_26-Mar-2019 11_34_00.mat');

%solverPars.readInitialStateFrom = ; % Provide trajectory file name to

%solverPars.parallel = 0;
solverPars.recording = 0;

%%set KS & vmax to nonzero
for k= 1:length(speciesToConsider)
     ksvalue = Ks(k);
     vmvalue = vmax(k);
     for j = 1:length(models(k).coupledReactions.ks)
        models(k).coupledReactions.ks(j) = ksvalue;
        models(k).coupledReactions.vmax(j) = vmvalue;
     end
end
%%Reactor parameter definition

reactor = reactorDefinition_773Agora(length(models), externalCompounds);

%% Parallel pool

if solverPars.parallel == 1
    myPool = parpool(min(length(models), solverPars.maxWorkers));
    
    global CBT_LP_SOLVER
    solver = CBT_LP_SOLVER;
    parfor i = 1:length(models)
        changeCobraSolver(solver, 'LP', 1, -1);
    end
    
    %each worker gets his share of FBA models
    %(memory requirements could be halfed if models were directly created
    %within workers)
    workerModels = Composite();
    for i = 1:numel(workerModels)
        workerModels{i} = models(i:numel(workerModels):length(models));
    end
end

if solverPars.saveLoadedModelsToFile == 1
    save(modelFile, 'models', 'externalCompounds', '-v7.3'); % for > 2GB
end

tic
if solverPars.parallel == 1
    trajectory = dFBASimulator(models, reactor, solverPars.solverType, solverPars, workerModels);
else
    trajectory = dFBASimulator(models, reactor, solverPars.solverType, solverPars, 0);
end
elapsedSeconds = toc;
elapsedHours = elapsedSeconds / 60 / 60;
%%  Save trajectory files

save(solverPars.trajectoryFile, 'trajectory', 'reactor', 'elapsedHours', '-v7.3');
movefile(solverPars.trajectoryFile,trajFilesPath);
movefile(modelFile,trajFilesPath);

%% Delete parallel pool at the end of the simulation
if solverPars.parallel == 1
   delete(gcp('nocreate'))
   delete(myPool);
end